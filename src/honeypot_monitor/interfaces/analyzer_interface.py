"""
Abstract interface for threat analyzers.
"""

from abc import ABC, abstractmethod
from typing import List
from ..models.log_entry import LogEntry
from ..models.threat_assessment import ThreatAssessment


class AnalyzerInterface(ABC):
    """Abstract base class for threat analyzers."""
    
    @abstractmethod
    def analyze_entry(self, entry: LogEntry) -> ThreatAssessment:
        """Analyze a single log entry for threats.
        
        Args:
            entry: LogEntry to analyze
            
        Returns:
            ThreatAssessment result
        """
        pass
    
    @abstractmethod
    def detect_patterns(self, entries: List[LogEntry]) -> List[dict]:
        """Detect patterns across multiple log entries.
        
        Args:
            entries: List of LogEntry objects to analyze
            
        Returns:
            List of detected patterns
        """
        pass
    
    @abstractmethod
    def apply_custom_rules(self, entry: LogEntry) -> List[dict]:
        """Apply custom detection rules to a log entry.
        
        Args:
            entry: LogEntry to analyze
            
        Returns:
            List of alerts generated by custom rules
        """
        pass